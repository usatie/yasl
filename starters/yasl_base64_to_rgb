#!yasl

{ "ã€€" } sq

{
	print
	"\n" print
} println

// This will print "hello" (r=20, g=30, b=50)
// print("\e[48;2;20;30;50mhello\e[m\n")
// https://unix.stackexchange.com/questions/608538/how-to-use-256-colors-for-background-color-in-terminal
// void println_rgb(int r, int g, int b, char *str)
{
	"\e[48;2;"                          // fmt = "\e[48;2;"
	(2 ^) (= 0 ==) ? (! "0") : ("" +) + // fmt += itoa(r)
	";" +                               // fmt += ";"
	(2 ^) (= 0 ==) ? (! "0") : ("" +) + // fmt += itoa(g)
	";" +                               // fmt += ";"
	(2 ^) (= 0 ==) ? (! "0") : ("" +) + // fmt += itoa(b)
	"m" +                               // fmt += "m"
	2 ^ +                               // fmt += str
	"\e[m" +                            // fmt += "\e[m"
	println                             // println(fmt)
} println_rgb

// bool isalpha_upper(char c)
{
	(= "A" >=) 2 ^   // cond1 = (c >= 'A')
	(  "Z" <=)       // cond2 = (c <= 'Z')
	*                // return (cond1 && cond2)
} isalpha_upper

// bool isalpha_lower(char c)
{
	(= "a" >=) 2 ^   // cond1 = (c >= 'a')
	(  "z" <=)       // cond2 = (c <= 'z')
	*                // return (cond1 && cond2)
} isalpha_lower

// bool isdigit(char c)
{
	(= "0" >=) 2 ^   // cond1 = (c >= '0')
	(  "9" <=)       // cond2 = (c <= '9')
	*                // return (cond1 && cond2)
} isdigit

// int base64_to_uint8(char hex)
{
	(= isalpha_upper) ? (              // if ('A' <= c && c <= 'Z')
		"A" -                          //     return (c - 'A')
	) : ( (= isalpha_lower) ? (        // else if ('a' <= c && c <= 'z')
		"a" - 26 +                     //     return (c - 'a' + 26)
	) : ( (= isdigit) ? (              // else if ('0' <= c && c <= '9')
		"0" - 52 +                     //     return (c - '0' + 52)
	) : ( (= "+" ==) ? (               // else if (c == '+')
		! 62                           //     return 62;
	) : ( (= "/" ==) ? (               // else if (c == '/')
		! 63                           //     return 63;
	) : (                              // else
		"Error" err_exit               //     err_exit("Error")
	)
	))))
} base64_to_uint8

// (int r, int g, int b) base64_to_rbg(char s[4])
{
	4 #( base64_to_uint8 (= !):9 )
	4 #( 9:(= !) )
	(
		(  077 &) (2 <<) (= !):9       // n1 = (s[0] & 077) << 2
		(= 060 &) (4 >>) (= !):9       // n2 = (s[1] & 060) >> 4
		9:(+):9                        // (n1 + n2)
	)
	(
		(  017 &) (4 <<) (= !):9        // n1 = (s[1] & 017) << 4
		(= 074 &) (2 >>) (= !):9        // n2 = (s[2] & 074) >> 2
		9:(+):9                         // (n1 + n2)
	)
	(
		(  003 &) (6 <<) (= !):9        // n1 = (s[2] & 003) << 6
		(= 077 &) (0 >>) (= !):9        // n2 = (s[3] & 077) >> 0
		9:(+):9                         // (n1 + n2)
	)
	3 #( 9:(= !) )
	print_stack
} base64_to_rgb

# #!                 // drop args
"F" base64_to_uint8
"d" base64_to_uint8
"8" base64_to_uint8
"+" base64_to_uint8
"-" base64_to_uint8
print_stack
# #!
"u" "F" "W" "T" base64_to_rgb
print_stack
