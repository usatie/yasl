#!./yasl

// void err_exit(char *str) __attribute__((noreturn))
{
	print        // print(str)
	"\n" print   // println()
	1 exit       // exit(1)
} err_exit

// int is_num(char *s)
//{
//	=               // dup s
//	][ #(= !):9     // for (c in s) mov c to stack 9
//
//	0:8 // sum = 0
//	9:(
//		#           // size(stack9)
//        #(
//			8:(10 *):8
//			8:(= !):9
//			+:8
//		)  // for c in str { sum = sum * 10 + c }
//		8:(= !)
//	):9
//	9:(= !) // move stack_top(9) to stack 0
//	==
//} is_num

{
	(1 63 <<) 1 - // (2^63 - 1)
} int_max

// check if x * y can overflow
// bool can_overflow(int x, int y)
{
	(int_max / ) <      // (INT_MAX / x) < y
} can_overflow

// Returns -1 on overflow
// int fact(int n)
{
	(= 0 <)                   // if (n < 0)
	? (! -1)                  //   return -1
	: (                       // else
		(= 0 ==) ? (          //   if (n == 0)
			! 1               //     return 1
		) : (                 //   else
			(= 1 - fact)      //   fact(n-1)
			(=:9) (2 ^ =:9)   //   dup n and fact(n-1) to stack 9
			9:can_overflow:9  //   can_overflow(n, fact(n-1))
			9:(= !) ? (       //   if (can_overflow)
			  ! -1            //     return -1
			) : (             //   else
				*             //     return (n * fact(n-1))
			)
		)              
	)
} fact

// void main(int argc, char *argv[])
(2 !=)                  // if (argc != 2)
? ("Error" err_exit)    //   err_exit("Error")

!                       // drop argv[0]

(= 0 <)                 // if (atoi(argv[1]) < 0)
? ("Error" err_exit)    //   err_exit("Error")

eval                    // n = atoi(argv[1])
fact                    // fact(n)
(= -1 ==)               // if overflow
? ("Overflow" err_exit) //   err_exit("Overflow")
print
