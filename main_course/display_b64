#!./yasl

// char sq(void)
{ "ã€€" } sq

// void println(char *str)
{
	print
	"\n" print
} println

// void err_exit(char *str) __attribute__((noreturn))
{
	print        // print(str)
	"\n" print   // println()
	1 exit       // exit(1)
} err_exit

// int sqrt(int n)
{
	(= !):9                   // move n to stack 9

	{
		= = *                 // i*i
		9:=                   // dup n to stack
		<=                    // (i*i <= n)
	} cond
	{ 1 + } inc               // i += 1

	1                         // i = 1
	cond @( inc cond )        // while (cond) { func(); inc(); }
	9:!                       // drop n from stack 9
	1 -                       // return (i - 1)
} sqrt

// This will print "hello" (r=20, g=30, b=50)
// print("\e[48;2;20;30;50mhello\e[m\n")
// https://unix.stackexchange.com/questions/608538/how-to-use-256-colors-for-background-color-in-terminal
// void print_rgb(int r, int g, int b, char *str)
{
	"\e[48;2;"                          // fmt = "\e[48;2;"
	(2 ^) (= 0 ==) ? (! "0") : ("" +) + // fmt += itoa(r)
	";" +                               // fmt += ";"
	(2 ^) (= 0 ==) ? (! "0") : ("" +) + // fmt += itoa(g)
	";" +                               // fmt += ";"
	(2 ^) (= 0 ==) ? (! "0") : ("" +) + // fmt += itoa(b)
	"m" +                               // fmt += "m"
	2 ^ +                               // fmt += str
	"\e[m" +                            // fmt += "\e[m"
	print                               // print(fmt)
} print_rgb

// bool isalpha_upper(char c)
{
	(= "A" >=) 2 ^   // cond1 = (c >= 'A')
	(  "Z" <=)       // cond2 = (c <= 'Z')
	*                // return (cond1 && cond2)
} isalpha_upper

// bool isalpha_lower(char c)
{
	(= "a" >=) 2 ^   // cond1 = (c >= 'a')
	(  "z" <=)       // cond2 = (c <= 'z')
	*                // return (cond1 && cond2)
} isalpha_lower

// bool isdigit(char c)
{
	(= "0" >=) 2 ^   // cond1 = (c >= '0')
	(  "9" <=)       // cond2 = (c <= '9')
	*                // return (cond1 && cond2)
} isdigit

// int base64_to_uint8(char hex)
{
	(= isalpha_upper) ? (              // if ('A' <= c && c <= 'Z')
		"A" -                          //     return (c - 'A')
	) : ( (= isalpha_lower) ? (        // else if ('a' <= c && c <= 'z')
		"a" - 26 +                     //     return (c - 'a' + 26)
	) : ( (= isdigit) ? (              // else if ('0' <= c && c <= '9')
		"0" - 52 +                     //     return (c - '0' + 52)
	) : ( (= "+" ==) ? (               // else if (c == '+')
		! 62                           //     return 62;
	) : ( (= "/" ==) ? (               // else if (c == '/')
		! 63                           //     return 63;
	) : (                              // else
		"Error" err_exit               //     err_exit("Error")
	)
	))))
} base64_to_uint8

// (int r, int g, int b) base64_to_rgb(char s[4])
{
	4 #( base64_to_uint8 (= !):9 )
	9:(
		(
			(  077 &) (2 <<) (= !):0       // n1 = (s[0] & 077) << 2
			(= 060 &) (4 >>) (= !):0       // n2 = (s[1] & 060) >> 4
			0:(+):0                        // (n1 + n2)
		)
		(
			(  017 &) (4 <<) (= !):0        // n1 = (s[1] & 017) << 4
			(= 074 &) (2 >>) (= !):0        // n2 = (s[2] & 074) >> 2
			0:(+):0                         // (n1 + n2)
		)
		(
			(  003 &) (6 <<) (= !):0        // n1 = (s[2] & 003) << 6
			(077 &) (0 >>) (= !):0          // n2 = (s[3] & 077) >> 0
			0:(+):0                         // (n1 + n2)
		)
	):9
} base64_to_rgb

// bool is_square(int n)
{
	(= sqrt)        // x = sqrt(n)
	(= * ==)        // return (n == x*x)
} is_square

// int print_pixel_msg(int n)
{
	"Image received, nb pixels : " print
	= println
} print_pixel_msg

// int print_square_msg(int n)
{
	"Found square : " print
	= println
} print_square_msg

// void print_img(int width, char *img)
{
	(= !):1                   // move x to stack 1
	][                        // unlist img
	!                         // drop size of the img
	1:= #(                    // while (_ in 1...x)
		1:= #(                //    while (_ in 1...x)
			base64_to_rgb     //       int (r,g,b) = base64_to_rgb(img[0:4])
			sq:2              // push sq to stack 2
			3 #((= !):2)      // push r,g,b to stack 2
		)
	)
	1:= #(                    // while (_ in 1...x)
		1:= #(                //    while (_ in 1...x)
			2:print_rgb:2     // print square char with color
		)
		"" println            // println("")
	)
	1:!                       // drop x
} print_img

// int main(int argc, char *argv[])
{
	# #!                      // drop args
	read                      // x = read(img)
	(= = 4 / 4 * !=) ? (      // if (x % 4 != 0)
		"Error1" err_exit     //   err_exit("Error")
	)
	( 4 / )                   // x = x / 4;
	print_pixel_msg
	(= is_square 0 ==) ? (    // if (is_square(x) == false)
		"Error2" err_exit     //   err_exit("Error")
	)
	
	sqrt                      // x = sqrt(x)
	print_square_msg
	print_img
} main

main
